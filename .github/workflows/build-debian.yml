name: Build Debian Package

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # 允许手动触发

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 获取完整历史以正确生成版本号

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: x86_64-unknown-linux-gnu

      # 添加缓存
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          # 只有当这些文件变化时才重建缓存
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          # 缓存整个target目录和cargo注册表
          cache-on-failure: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libsqlite3-dev pkg-config

      - name: Build release binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target x86_64-unknown-linux-gnu

      - name: Generate version number
        id: version
        run: |
          # 尝试使用git标签作为版本号（移除v前缀）
          GIT_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [[ -n "$GIT_TAG" && "$GIT_TAG" =~ ^v[0-9].* ]]; then
            # 有标签且格式正确，使用标签版本
            VERSION="${GIT_TAG#v}"
          else
            # 没有合适的标签，使用日期+提交哈希作为版本号
            COMMIT_HASH=$(git rev-parse --short HEAD)
            DATE=$(date +%Y%m%d)
            VERSION="0.1.0~${DATE}.${COMMIT_HASH}"
          fi
          
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "生成的版本号：$VERSION"

      - name: Create Debian package structure
        run: |
          mkdir -p debian/DEBIAN
          mkdir -p debian/usr/bin
          mkdir -p debian/usr/share/doc/api-manager
          
          # 拷贝二进制文件
          cp target/x86_64-unknown-linux-gnu/release/api-manager debian/usr/bin/
          chmod +x debian/usr/bin/api-manager
          
          # 创建控制文件
          cat > debian/DEBIAN/control << EOF
          Package: api-manager
          Version: ${{ env.VERSION }}
          Section: utils
          Priority: optional
          Architecture: amd64
          Maintainer: API Manager Team <info@example.com>
          Description: API Manager for DeepSeek and other AI models
           A management tool for AI API providers with load balancing capabilities.
          EOF
          
      - name: Build Debian package
        run: |
          dpkg-deb --build debian
          mv debian.deb api-manager_${{ env.VERSION }}.deb

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: api-manager-debian
          path: api-manager_*.deb

      # 仅在发布标签时创建发布
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          files: api-manager_*.deb
          draft: false
          prerelease: false 